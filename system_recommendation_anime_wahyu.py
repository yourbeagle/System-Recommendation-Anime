# -*- coding: utf-8 -*-
"""System_Recommendation_Anime_Wahyu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nvy975eKA0RiYLC-EHHH2s-H5dpYBX-s

#Import Library Kaggle
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d hernan4444/anime-recommendation-database-2020 -p /content/sample_data/ --unzip

"""#Import Library yang dibutuhkan"""

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt

import seaborn as sns
import re
import textwrap

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from tensorflow import keras

"""#Read Dataset"""

anime_data = pd.read_csv('/content/sample_data/anime.csv')
anime_data.head()

"""#Exploratory Data Analysis"""

anime_data.info()

"""**Membuang Variabel yang tidak memiliki korelasi**"""

anime_data = anime_data.drop(['English name','Japanese name', 'Aired', 'Premiered', 'Licensors', 'Duration', 'Watching', 
                              'Completed', 'On-Hold', 'Dropped', 'Plan to Watch','Score-10','Score-9','Score-8',
                              'Score-7','Score-6','Score-5','Score-4','Score-3','Score-2','Score-1'], axis=1)
anime_data.head()

"""**Deskripsi Setiap Variabel**"""

anime_data.info()

"""1.   MAL_ID - kode unik untuk mengindentifikasi setiap anime
2.   Name - judul dari anime
3.   Score - Rata-rata skor yang diberikan oleh user MAL
4.   Genres - Genre dari anime
5.   Episodes - Jumlah episode dari anime (1, jika movie atau spesial episode)
6.   Producers - Producer yang membuat anime
7.   Studios - Studio yang menggarap anime
8.   Source - Sumber dari cerita anime
9.   Rating - Rating dari anime
10.  Ranked - Peringkat dari anime berdasarkan nilai skor
11.  Popularity - Peringkat dari anime berdasarkan user menambahkan ke watchlist
12.  Members - jumlah anggota komunitas yang ada di "grup" anime
13.  Favorites - jumlah anggota komunitas yang menambahkan anime kedalam daftar favorit mereka

#Missing Value
"""

print("Data Yang \t => \t Kolom")
print("Memiliki")
print("Nilai Null")
print("=======================")
for i in anime_data.columns:
    print((anime_data[i].isna()).sum(), "\t => \t" + i)

anime_data.shape

"""Mengubah nilai Unknown pada Kolom Score dengan nilai 0"""

anime_data['Score'] = anime_data['Score'].replace(['Unknown'],0)

anime_data.shape

"""Mengubah tipe data Score menjadi float"""

anime_data['Score'] = anime_data['Score'].astype('float')

"""#Univariate Data Analysis"""

anime_tipe = anime_data['Type'].value_counts()
sns.barplot(y=anime_tipe.values,
            x=anime_tipe.index,).set_title("Tipe Anime")
plt.show()

anime_rating = anime_data['Rating'].value_counts()
sns.barplot(y=anime_rating.values,
            x=[textwrap.fill(e, 7) for e in anime_rating.index]).set_title("Rating Anime")
plt.show()

fig, ax = plt.subplots()
sns.distplot(anime_data['Score'], ax = ax)
ax.set_xlim(1, 10)
plt.show()

anime_producers_count=anime_data['Producers'].value_counts().sort_values(ascending=False)
anime_producers_count=pd.DataFrame(anime_producers_count)
topProducers=anime_producers_count[1:11]
topProducers

anime_studios_count=anime_data['Studios'].value_counts().sort_values(ascending=False)
anime_studios_count=pd.DataFrame(anime_studios_count)
topStudios=anime_studios_count[1:11]
topStudios

"""#Multivariate Analysis"""

sns.pairplot(anime_data, diag_kind = 'kde')

"""#Text Cleaning"""

anime_data['Name'].unique()[5:15]

replace_puncts = {'`': "'", '′': "'", '“':'"', '”': '"', '‘': "'"}

strip_chars = [',', '.', '"', ':', ')', '(', '-', '|', ';', "'", '[', ']', '>', '=', '+', '\\', '•',  '~', '@', 
 '·', '_', '{', '}', '©', '^', '®', '`',  '<', '→', '°', '€', '™', '›',  '♥', '←', '×', '§', '″', '′', 'Â', '█', '½', 'à', '…', 
 '“', '★', '”', '–', '●', 'â', '►', '−', '¢', '²', '¬', '░', '¶', '↑', '±', '¿', '▾', '═', '¦', '║', '―', '¥', '▓', '—', '‹', '─', 
 '▒', '：', '¼', '⊕', '▼', '▪', '†', '■', '’', '▀', '¨', '▄', '♫', '☆', 'é', '¯', '♦', '¤', '▲', 'è', '¸', '¾', 'Ã', '⋅', '‘', '∞', 
 '∙', '）', '↓', '、', '│', '（', '»', '，', '♪', '╩', '╚', '³', '・', '╦', '╣', '╔', '╗', '▬', '❤', 'ï', 'Ø', '¹', '≤', '‡', '√', ]

puncts = ['!', '?', '$', '&', '/', '%', '#', '*','£']

def textCleaning(x):
    x = str(x)
    x = x.lower()
    x = re.sub(r"(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})", "url", x)
    for k, v in replace_puncts.items():
        x = x.replace(k, f' {v} ')
        
    for punct in strip_chars:
        x = x.replace(punct, ' ') 
    
    for punct in puncts:
        x = x.replace(punct, f' {punct} ')
        
    x = x.replace(" '", " ")
    x = x.replace("' ", " ")
    x = x.strip()

    return x

anime_data['Name'] = anime_data['Name'].apply(textCleaning)

anime_data['Name'].unique()[0:15]

"""#Model Development with Content Based Filtering

Disini saya menggunakan **TF-IDF Vectorizer** sebagai model yang digunakan untuk menemukan representasi fitur penting dari setiap genre anime
"""

anime_id = anime_data['MAL_ID'].tolist()
anime_name = anime_data['Name'].tolist()
anime_genres = anime_data['Genres'].tolist()

print(len(anime_id))
print(len(anime_name))
print(len(anime_genres))

anime_data_new = pd.DataFrame({
    'animeID': anime_id,
    'animeName': anime_name,
    'animeGenre': anime_genres
})
anime_data_new

data = anime_data_new
data.sample(5)

tf = TfidfVectorizer()
tf.fit(data['animeGenre'])
tf.get_feature_names()

tfidf_matrix = tf.fit_transform(data['animeGenre'])
tfidf_matrix.shape

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=data.animeName
).sample(22, axis=1).sample(10, axis=0)

cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['animeName'], columns=data['animeName'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Di sini, kita membuat fungsi get_anime_recommendations dengan beberapa parameter sebagai berikut:

1.   anime_name : Nama Anime (index kemiripan dataframe).
2.   Similarity_data : Dataframe mengenai similarity yang telah kita definisikan sebelumnya.
3.   Items : Nama dan fitur yang digunakan untuk mendefinisikan kemiripan, dalam hal ini adalah ‘animeID’, ‘animeName’, dan ‘animeGenre’.
4.   k : Banyak rekomendasi yang ingin diberikan.


"""

def get_anime_recommendations(anime_name, similarity_data=cosine_sim_df, items=data[['animeID', 'animeName', 'animeGenre']], k=10):
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,anime_name].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop nama_resto agar nama resto yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(anime_name, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

"""#Evaluasi

Untuk mengevaluasi model saya melakukan uji coba langsung dengan memanggil fungsi yang sudah saya buat dan memasukan judul anime yang pengguna suka sebelumnya.
"""

data[data.animeName.eq('inuyasha')]

get_anime_recommendations('inuyasha')

"""Kita copy hasil dari fungsi get_anime_recommendations dengan input inuyasha kedalam variabel genre_recom"""

genre_recom = get_anime_recommendations('inuyasha')

"""Kita copy value dari datafram anime dengan nama inuyasha kedalam variabel genre_exp sebagai patokan kita untuk mencocokkan dengan genre yang di rekomendasikan fungsi """

genre_exp = anime_data[anime_data['Name'] == 'inuyasha']

genre_exp

"""Memisah genre yang ada di varibel genre_exp kedalam array baru"""

get_recom_genre=[]
for i in range(len(genre_exp.Genres)):
    for x in genre_exp.Genres.str.split(','):
        if x not in get_recom_genre:
            get_recom_genre.append(x)

"""Melihat akurasi pada genre yang direkomendasikan, dapat dilihat anime yang direkomendasikan oleh fungsi memiliki nilai 100% akurasi pada setiap genre"""

for i in get_recom_genre[0]:
  print(i + ": " + str((
      (genre_recom['animeGenre'].str.contains(i).count()/genre_recom['animeGenre'].count())*100)
  ))

get_anime_recommendations('naruto')

get_anime_recommendations('overlord')

get_anime_recommendations('one piece')